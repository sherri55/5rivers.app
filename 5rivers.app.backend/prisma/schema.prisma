generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../src/db/5rivers.db"
}

/// *
///  * prisma/schema.prisma
model Company {
  companyId   String    @id @default(uuid())
  name        String
  description String?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  jobTypes    JobType[]
}

model Dispatcher {
  dispatcherId      String    @id @default(uuid())
  name              String
  description       String?
  email             String
  phone             String?
  commissionPercent Float
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  invoices          Invoice[]
  jobs              Job[]
}

model Driver {
  driverId    String       @id @default(uuid())
  name        String
  description String?
  email       String
  phone       String?
  hourlyRate  Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  driverRates DriverRate[]
  jobs        Job[]
}

model Unit {
  unitId      String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  color       String?
  plateNumber String?
  vin         String?
  jobs        Job[]
}

model JobType {
  jobTypeId     String       @id @default(uuid())
  title         String
  startLocation String?
  endLocation   String?
  dispatchType  String
  rateOfJob     Float
  companyId     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  driverRates   DriverRate[]
  jobs          Job[]
  company       Company?     @relation(fields: [companyId], references: [companyId])
}

model DriverRate {
  driverRateId   String   @id @default(uuid())
  driverId       String
  jobTypeId      String
  hourlyRate     Float?
  percentageRate Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  jobType        JobType  @relation(fields: [jobTypeId], references: [jobTypeId])
  driver         Driver   @relation(fields: [driverId], references: [driverId])

  @@unique([driverId, jobTypeId])
}

model Job {
  jobId           String        @id @default(uuid())
  jobDate         String
  jobGrossAmount  Float?
  jobTypeId       String?
  driverId        String?
  dispatcherId    String?
  unitId          String?
  invoiceId       String?
  invoiceStatus   String        @default("Pending")
  weight          String?
  loads           Int?
  startTime       String?
  endTime         String?
  ticketIds       String?
  paymentReceived Boolean       @default(false)
  driverPaid      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  imageUrls       String?
  invoiceLines    InvoiceLine[]
  invoice         Invoice?      @relation(fields: [invoiceId], references: [invoiceId])
  unit            Unit?         @relation(fields: [unitId], references: [unitId])
  dispatcher      Dispatcher?   @relation(fields: [dispatcherId], references: [dispatcherId])
  driver          Driver?       @relation(fields: [driverId], references: [driverId])
  jobType         JobType?      @relation(fields: [jobTypeId], references: [jobTypeId])
}

model Invoice {
  invoiceId       String        @id @default(uuid())
  dispatcherId    String
  invoiceNumber   String        @unique
  invoiceDate     DateTime
  status          String        @default("Pending")
  subTotal        Float?
  dispatchPercent Float?
  commission      Float?
  hst             Float?
  total           Float?
  billedTo        String?
  billedEmail     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  dispatcher      Dispatcher    @relation(fields: [dispatcherId], references: [dispatcherId])
  invoiceLines    InvoiceLine[]
  jobs            Job[]
}

model InvoiceLine {
  invoiceLineId String   @id @default(uuid())
  invoiceId     String
  jobId         String
  lineAmount    Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  job           Job      @relation(fields: [jobId], references: [jobId])
  invoice       Invoice  @relation(fields: [invoiceId], references: [invoiceId])
}

model User {
  userId    String               @id
  email     String               @unique(map: "sqlite_autoindex_User_1")
  password  String
  name      String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  id        Unsupported("uuid")?
}
